name: Build & Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Debug

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest",
            os: ubuntu-latest,
            triplet: x64-linux,
            cc: "gcc",
            cxx: "g++"
          }

    steps:
    - name: Setup - cmake
      uses: lukka/get-cmake@latest

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Prepare deps - liburing
      id: prepare-deps-liburing
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: chmod 700 $GITHUB_WORKSPACE/tools/gh_build_and_test_support/install_liburing.sh && V=1 CFLAGS="-g -O0 -fno-inline -DDEBUG=1" $GITHUB_WORKSPACE/tools/gh_build_and_test_support/install_liburing.sh -o $(pwd)/deps/liburing -c 94ba6378bea8db499bedeabb54ab20fcf41555cf && echo ::set-env name=PKG_CONFIG_PATH::$(pwd)/deps/liburing/install/lib/pkgconfig:${PKG_CONFIG_PATH} && echo ::set-env name=LD_LIBRARY_PATH::$(pwd)/deps/liburing/install/lib:${LD_LIBRARY_PATH}

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: CC=/usr/bin/gcc-9 CXX=/usr/bin/g++-9 cmake $GITHUB_WORKSPACE -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DUSE_HASHTABLE_HASH_ALGORITHM_T1HA2=1 -DBUILD_TESTS=1 -DBUILD_INTERNAL_BENCHES=1

    - name: Build All
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --target cachegrand-tests -- -j 4

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: tests/cachegrand-tests

    - name: Code Coverage - Generation
      uses: danielealbano/lcov-action@v1
      with:
        remove_patterns: 3rdparty,tests

    - name: Code Coverage - Upload to codecov.io
      shell: bash
      working-directory: ${{github.workspace}}
      run: bash <(curl -s https://codecov.io/bash) -X gcov -Z -f coverage.info
